&НаКлиенте
Перем ИдентификаторКомпоненты, ВнешняяКомпонента, ПортБраузера, АдресВебСокет;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторДокумента = "dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6YTM2MHZpZXdlci90MTYwNDczODY3MjI1N18wMTI5Mzc2MTY0MzM3Njc0NTJfMTYwNDczODY3MjI3Mi5ydnQ";
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МакетКомпоненты = ОбработкаОбъект.ПолучитьМакет("VanessaExt");
	АдресКомпоненты = ПоместитьВоВременноеХранилище(МакетКомпоненты, УникальныйИдентификатор);
	Цвет = WebЦвета.СветлоЗеленый;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИдентификаторКлиента = "KRCnmNK2sf6gTktbsXfsrL1TNeBuOmZm";
	АдресПриложения = "http://lintest.ru/forge/";
	
	ИдентификаторКомпоненты = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	ВыполнитьПодключениеВнешнейКомпоненты(Истина);
	ПапкиПоиска = Новый Массив;
	ПапкиПоиска.Добавить("%ProgramFiles(x86)%");
	ПапкиПоиска.Добавить("%ProgramFiles%");
	ПапкиПоиска.Добавить("%LocalAppData%");
	НайтиБраузер(ПапкиПоиска);
	ПортБраузера = 9222;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиБраузер(ПапкиПоиска)
	
	Если ПапкиПоиска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Попытка
			ПапкаПоиска = ПапкиПоиска.Получить(0);
			ПапкиПоиска.Удалить(0);
			Shell = Новый COMОбъект("WScript.Shell");
			ProgramFiles = Shell.ExpandEnvironmentStrings(ПапкаПоиска);
			ИмяФайла = "\Google\Chrome\Application\chrome.exe";
			Файл = Новый Файл(ProgramFiles + ИмяФайла);
			ДополнительныеПараметры = Новый Структура("ПолноеИмя,ПапкиПоиска", Файл.ПолноеИмя, ПапкиПоиска);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаСуществованияФайла", ЭтотОбъект, ДополнительныеПараметры);
			Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
		Исключение
			//Ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		ИнтернетБраузер = ДополнительныеПараметры.ПолноеИмя;
	Иначе
		НайтиБраузер(ДополнительныеПараметры.ПапкиПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключениеВнешнейКомпоненты(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения, АдресКомпоненты, ИдентификаторКомпоненты, ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеВнешнейКомпонентыЗавершение(Подключение, ДополнительныеПараметры) Экспорт
	
	Если Подключение Тогда
		ВнешняяКомпонента = Новый("AddIn." + ИдентификаторКомпоненты + ".WindowsControl");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаВерсияКомпоненты", ЭтотОбъект);
		ВнешняяКомпонента.НачатьПолучениеВерсия(ОписаниеОповещения);
	ИначеЕсли ДополнительныеПараметры = Истина Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключениеВнешнейКомпоненты", ЭтотОбъект, Ложь);
		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, АдресКомпоненты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученаВерсияКомпоненты(Значение, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьБраузер(Команда)
	
	СтрокаКоманды = """" + ИнтернетБраузер + """ about:blank --remote-debugging-port=" + Формат(ПортБраузера, "ЧГ=");
	НачатьЗапускПриложения(Новый ОписаниеОповещения, СтрокаКоманды);
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды.Найти(ИмяКоманды).Заголовок;
	
КонецФункции

&НаКлиенте
Процедура ОшибкаБраузера(Команда)
	
	ИнформационныйТекст =
		"Перед вызовом команды «" + ЗаголовокКоманды(Команда.Имя) + "»
		|закройте все открытые окна Google Chrome
		|и запустите снова кнопкой «Запустить браузер».";
	ПоказатьПредупреждение( , ИнформационныйТекст, 10);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокен(Команда)
	
	Если Не ПустаяСтрока(Токен) Тогда
		ОткрытьAutodesk(Команда);
		Возврат;
	КонецЕсли;
	
	АдресURL = "https://developer.api.autodesk.com/authentication/v1/authorize"
		+ "?response_type=token"
		+ "&client_id=" + ИдентификаторКлиента
		+ "&redirect_uri=" + АдресПриложения;
	
	HTTPЗапрос = Новый HTTPЗапрос("/json/new?" + АдресURL);
	HTTPСоединение = Новый HTTPСоединение("localhost", ПортБраузера, , , , 10);
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		ОшибкаБраузера(Команда);
		Возврат;
	КонецПопытки;
	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	АдресВебСокет = ДанныеJSON.webSocketDebuggerUrl;
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеТокена", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовОткрытьВебСокет(ОписаниеОповещения, АдресВебСокет);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеТокена(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("ПолучитьТокенБраузера", 2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенБраузера() Экспорт
	
	ТекстСкрипта = "{
		|let loc = new URL(window.location);
		|let url = new URL('http://ya.ru/?' + loc.hash.slice(1));
		|url.searchParams.get('access_token')
		|}";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьТокенБраузера", ЭтотОбъект);
	ВыполнитьJavaSctipt(ТекстСкрипта, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТокенБраузера(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДанныеJSON = ПрочитатьСтрокуJSON(РезультатВызова);
	ДанныеТокена = ДанныеJSON.result.result.value;
	Если ПустаяСтрока(ДанныеТокена) Тогда
		ПодключитьОбработчикОжидания("ПолучитьТокенБраузера", 2, Истина);
	Иначе
		Токен = ДанныеТокена;
		ОтключитьОбработчикОжидания("ПолучитьТокенБраузера");
		АдресURL = АдресПриложения + "?Token=" + Токен + "&DocId=urn:" + ИдентификаторДокумента;
		ПараметрыМетода = Новый Структура("url", АдресURL);
		ДанныеJSON = Новый Структура("id,method,params", 1, "Page.navigate", ПараметрыМетода);
		КомандаJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
		ВнешняяКомпонента.НачатьВызовПослатьВебСокет(Новый ОписаниеОповещения, КомандаJSON);
		ПодключитьОбработчикОжидания("НачальноеЗаполнение", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальноеЗаполнение()
	
	ТекстСкрипта = "{
		|let tree = viewer.model.getData().instanceTree;
		|if (tree) {
		|	let list = [];
		|	let root = tree.getRootId();
		|	tree.enumNodeChildren(root, (n) => {
		|  		let elem = {id: n, name: tree.getNodeName(n)};
		|    	list.push(elem);
		|	});
		|	let view = md_viewables.map(e => e.data.name);
		|	JSON.stringify({
		|		view: view,
		|		list: list,
		|	});
		|}
		|}";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыНачальныеДанные", ЭтотОбъект);
	ВыполнитьJavaSctipt(ТекстСкрипта, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыНачальныеДанные(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДанныеJSON = ПрочитатьСтрокуJSON(РезультатВызова);
	Если ДанныеJSON.result.result.Свойство("value") Тогда
		ПолученыКонструкции(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры);
	Иначе
		ПодключитьОбработчикОжидания("НачальноеЗаполнение", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьAutodesk(Команда)
	
	АдресURL = АдресПриложения + "?Token=" + Токен + "&DocId=" + ИдентификаторДокумента;
	HTTPЗапрос = Новый HTTPЗапрос("/json/new?" + АдресURL);
	HTTPСоединение = Новый HTTPСоединение("localhost", ПортБраузера, , , , 10);
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		ОшибкаБраузера(Команда);
		Возврат;
	КонецПопытки;
	
	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	ДанныеJSON = ПрочитатьСтрокуJSON(ТекстJSON);
	АдресВебСокет = ДанныеJSON.webSocketDebuggerUrl;
	ВнешняяКомпонента.НачатьВызовОткрытьВебСокет(Новый ОписаниеОповещения, АдресВебСокет);
	ПодключитьОбработчикОжидания("НачальноеЗаполнение", 3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьJavaSctipt(ТекстСкрипта, ОписаниеОповещения)
	
	Если ПустаяСтрока(АдресВебСокет) Тогда
		ВызватьИсключение "Отсутствует соединение с моделью";
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура("expression", ТекстСкрипта);
	ДанныеJSON = Новый Структура("id,method,params", 1, "Runtime.evaluate", ПараметрыМетода);
	КомандаJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	ВнешняяКомпонента.НачатьВызовПослатьВебСокет(ОписаниеОповещения, КомандаJSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовJavaSctipt(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	//	Сообщить(РезультатВызова);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонструкции(Команда)
	
	ТекстСкрипта = "{
		|let tree = viewer.model.getData().instanceTree;
		|let root = tree.getRootId();
		|let list = [];
		|if (tree) {
		|	tree.enumNodeChildren(root, (n) => {
		|  		let elem = {id: n, name: tree.getNodeName(n)};
		|    	list.push(elem);
		|	});
		|	let view = md_viewables.map(e => e.data.name);
		|	JSON.stringify({
		|		view: view,
		|		list: list,
		|	});
		|}
		|}";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыКонструкции", ЭтотОбъект);
	ВыполнитьJavaSctipt(ТекстСкрипта, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьСтрокуJSON(ТекстJSON)
	
	Если ПустаяСтрока(ТекстJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции

&НаКлиенте
Функция ЗаписатьСтрокуJSON(ДанныеJSON)
	
	ЗаписьJSON = новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаКлиенте
Процедура ПолученыКонструкции(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДанныеJSON = ПрочитатьСтрокуJSON(РезультатВызова);
	ДанныеJSON = ПрочитатьСтрокуJSON(ДанныеJSON.result.result.value);
	
	Конструкции.ПолучитьЭлементы().Очистить();
	Для каждого ЭлементДанных из ДанныеJSON.list Цикл
		НоваяСтр = Конструкции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр, ЭлементДанных);
		НоваяСтр.ПолучитьЭлементы().Добавить();
		НоваяСтр.show = true;
	КонецЦикла;
	
	НомерЭлемента = 0;
	Элементы.Модель.СписокВыбора.Очистить();
	Для каждого ЭлементДанных из ДанныеJSON.view Цикл
		Элементы.Модель.СписокВыбора.Добавить(НомерЭлемента, ЭлементДанных);
		НомерЭлемента = НомерЭлемента + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкцииВидимостьПриИзменении(Элемент)
	
	ТекСтр = Элементы.Конструкции.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеJSON = Новый Структура("id,show");
	ЗаполнитьЗначенияСвойств(ДанныеJSON, ТекСтр);
	ТекстJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	
	ТекстСкрипта = "{
		|let param = " + ТекстJSON + "
		|viewer.impl.visibilityManager.setNodeOff(param.id, !(param.show))
		|}";
	
	ВыполнитьJavaSctipt(ТекстСкрипта, Новый ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВидимость(Видимость)
	
	Массив = Новый Массив;
	Для каждого Стр из Конструкции.ПолучитьЭлементы() Цикл
		Массив.Добавить(Стр.id);
	КонецЦикла;
	
	ДанныеJSON = Новый Структура("ids,show", Массив, Видимость);
	ТекстJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	
	ТекстСкрипта = "{
		|let param = " + ТекстJSON + "
		|param.ids.forEach(id =>
		|	viewer.impl.visibilityManager.setNodeOff(id, !(param.show))
		|)}";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПереключенаВидимость", ЭтотОбъект, Видимость);
	ВыполнитьJavaSctipt(ТекстСкрипта, ОписаниеОповещения);


КонецПроцедуры	

&НаКлиенте
Процедура ПереключенаВидимость(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Для каждого Стр из Конструкции.ПолучитьЭлементы() Цикл
		Стр.show = ДополнительныеПараметры;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ПереключитьВидимость(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ПереключитьВидимость(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкцииПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекСтр = Конструкции.НайтиПоИдентификатору(Строка);
	
	ТекстСкрипта = "{
		|let tree = viewer.model.getData().instanceTree;
		|let root = " + Формат(ТекСтр.id, "ЧГ=") + ";
		|let list = [];
		|tree.enumNodeChildren(root, (n) => {
		|    let elem = {id: n, name: tree.getNodeName(n)};
		|    list.push(elem);
		|});
		|JSON.stringify(list);
		|}";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыДочерниеЭлементы", ЭтотОбъект, Строка);
	ВыполнитьJavaSctipt(ТекстСкрипта, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыДочерниеЭлементы(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ИдСтроки = ДополнительныеПараметры;
	ТекСтр = Конструкции.НайтиПоИдентификатору(ИдСтроки);
	ДанныеJSON = ПрочитатьСтрокуJSON(РезультатВызова);
	ДанныеJSON = ПрочитатьСтрокуJSON(ДанныеJSON.result.result.value);
	ТекСтр.ПолучитьЭлементы().Очистить();
	Для каждого ЭлементДанных из ДанныеJSON Цикл
		НоваяСтр = ТекСтр.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр, ЭлементДанных);
		НоваяСтр.ПолучитьЭлементы().Добавить();
		НоваяСтр.show = true;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	
	ТекстСкрипта = "{
		|viewer.loadDocumentNode(md_ViewerDocument, md_viewables[" + Формат(Модель, "ЧН=0; ЧГ=") + "]);
		|}";
	ВыполнитьJavaSctipt(ТекстСкрипта, Новый ОписаниеОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АбсолютыйЦветСервер(ИсходныйЦвет)
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Область("R1C1").ЦветФона = ИсходныйЦвет;
	ВременныйФайл = ПолучитьИмяВременногоФайла("mxl");
	ТабДок.Записать(ВременныйФайл, ТипФайлаТабличногоДокумента.MXL7);
	ТабДок.Прочитать(ВременныйФайл);
	УдалитьФайлы(ВременныйФайл);
	АЦвет = ТабДок.Область("R1C1").ЦветФона;
	Возврат АЦвет;
КонецФункции

&НаКлиенте
Функция ЦветЧислом(Цвет) Экспорт
	
	АбсолютныйЦвет = АбсолютыйЦветСервер(Цвет);
	Возврат 256 * 256 * АбсолютныйЦвет.Красный + 256 * АбсолютныйЦвет.Зеленый + АбсолютныйЦвет.Синий;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьЦвет(Команда)
	
	ДанныеJSON = Новый Массив;
	Для каждого ИдСтроки из Элементы.Конструкции.ВыделенныеСтроки Цикл
		ТекСтр = Конструкции.НайтиПоИдентификатору(ИдСтроки);
		ДанныеJSON.Добавить(ТекСтр.id);
	КонецЦикла;
	ТекстJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	
	ТекстСкрипта = "{
		|let node = " + ТекстJSON + "
		|let list = [];
		|let tree = viewer.model.getData().instanceTree;
		|node.forEach(e => tree.enumNodeChildren(e, n => {list.push(n)}, true));
		|let color = " + Формат(ЦветЧислом(Цвет), "ЧГ=") + "
		|viewer.setColorMaterial(list, color);
		|}";
	
	ВыполнитьJavaSctipt(ТекстСкрипта, Новый ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОригинальныйЦвет(Команда)
	
	ДанныеJSON = Новый Массив;
	Для каждого ИдСтроки из Элементы.Конструкции.ВыделенныеСтроки Цикл
		ТекСтр = Конструкции.НайтиПоИдентификатору(ИдСтроки);
		ДанныеJSON.Добавить(ТекСтр.id);
	КонецЦикла;
	ТекстJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	
	ТекстСкрипта = "{
		|let node = " + ТекстJSON + "
		|let list = [];
		|let tree = viewer.model.getData().instanceTree;
		|node.forEach(e => tree.enumNodeChildren(e, n => {list.push(n)}, true));
		|viewer.restoreColorMaterial(list);
		|}";
	
	ВыполнитьJavaSctipt(ТекстСкрипта, Новый ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкцииПриАктивизацииСтроки(Элемент)
	
	ИдКонструкции = Неопределено;
	Свойства.ПолучитьЭлементы().Очистить();
	ИдСтроки = Элементы.Конструкции.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекСтр = Конструкции.НайтиПоИдентификатору(ИдСтроки);
	
	ВыделенныеЭлементы = Новый Массив;
	Для каждого Стр из Элементы.Конструкции.ВыделенныеСтроки Цикл
		СтрокаВыделения = Конструкции.НайтиПоИдентификатору(Стр);
		ВыделенныеЭлементы.Добавить(СтрокаВыделения.id);
	КонецЦикла;
	
	ТекстСкрипта = "{
		|let node = " + Формат(ТекСтр.id, "ЧГ=") + ";
		|viewer.select(" + ЗаписатьСтрокуJSON(ВыделенныеЭлементы) + ");
		|viewer.model.getBulkProperties2([node], {ignoreHidden: true}, e => {window.AutodeskProps1C = e})
		|}";
	
	ВыполнитьJavaSctipt(ТекстСкрипта, Новый ОписаниеОповещения);
	ПодключитьОбработчикОжидания("ПолучитьСвойстваСтроки", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСвойстваСтроки()
	
	ТекстСкрипта = "{
		|let prop = window.AutodeskProps1C[0];
		|let data = {id: prop.dbId, uuid: prop.externalId, props: []};
		|prop.properties.forEach(p => { 
		|	data.props.push({
		|		category: p.displayCategory, 
		|		attr: p.attributeName, 
		|		name: p.displayName, 
		|		value: p.displayValue,
		|		units: p.units,
		|	})
		|});
		|JSON.stringify(data)
		|}";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыСвойстваСтроки", ЭтотОбъект);
	ВыполнитьJavaSctipt(ТекстСкрипта, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыСвойстваСтроки(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ИдКонструкции = Неопределено;
	Свойства.ПолучитьЭлементы().Очистить();
	ИдСтроки = Элементы.Конструкции.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекСтр = Конструкции.НайтиПоИдентификатору(ИдСтроки);
	
	ДанныеJSON = ПрочитатьСтрокуJSON(РезультатВызова);
	ДанныеJSON = ПрочитатьСтрокуJSON(ДанныеJSON.result.result.value);
	ИдКонструкции = ДанныеJSON.uuid;
	Если ДанныеJSON.id = ТекСтр.id Тогда
		МассивКатегории = Новый Массив;
		Если ДанныеJSON.Свойство("props") Тогда
			Для каждого Элемент из ДанныеJSON.props Цикл
				Если МассивКатегории.Найти(Элемент.category) = Неопределено Тогда
					МассивКатегории.Добавить(Элемент.category);
				КонецЕсли;
			КонецЦикла;
			Для каждого Категория из МассивКатегории Цикл
				СтрокаКатегории = Свойства.ПолучитьЭлементы().Добавить();
				СтрокаКатегории.Наименование = Категория;
				Для каждого Элемент из ДанныеJSON.props Цикл
					Если Категория = Элемент.category Тогда
						СтрокаСвойство = СтрокаКатегории.ПолучитьЭлементы().Добавить();
						СтрокаСвойство.Наименование = Элемент.name;
						СтрокаСвойство.Значение = Элемент.value;
						СтрокаСвойство.ЕдИзм = Элемент.units;
					КонецЕсли;
				КонецЦикла;
				Элементы.Свойства.Развернуть(СтрокаКатегории.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБраузер(Команда)
	
	Если ПустаяСтрока(АдресВебСокет) Тогда
		ВызватьИсключение "Отсутствует соединение с браузером";
	КонецЕсли;
	
	АдресВебСокет = Неопределено;
	ДанныеJSON = Новый Структура("id,method", 1, "Browser.close");
	КомандаJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	ВнешняяКомпонента.НачатьВызовПослатьВебСокет(Новый ОписаниеОповещения, КомандаJSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьВкладки(Команда)
	
	HTTPЗапрос = Новый HTTPЗапрос("/json");
	HTTPСоединение = Новый HTTPСоединение("localhost", ПортБраузера, , , , 10);
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение "Отсутствует соединение с браузером";
		Возврат;
	КонецПопытки;
	
	АдресВебСокет = Неопределено;
	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	ДанныеJSON = ПрочитатьСтрокуJSON(ТекстJSON);
	Для каждого Элемент из ДанныеJSON Цикл
		ДанныеJSON = Новый Структура("id,method", 1, "Page.close");
		КомандаJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
		ВнешняяКомпонента.НачатьВызовВебСокет(
			Новый ОписаниеОповещения, Элемент.webSocketDebuggerUrl, КомандаJSON);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыделение(Команда)
	
	Выделение.Очистить();
	
	ТекстСкрипта = "{
		|let selection = viewer.impl.selector.getAggregateSelection()[0].selection||[];
		|viewer.model.getBulkProperties2(selection, {ignoreHidden: true}, e => {window.AutodeskSelection1C = e})
		|}";
	
	ВыполнитьJavaSctipt(ТекстСкрипта, Новый ОписаниеОповещения);
	ПодключитьОбработчикОжидания("ПолучитьДанныеВыделения", 2, Истина);
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыделение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеВыделения()
	
	ТекстСкрипта = "{
		|let list = [];
		|let selection = window.AutodeskSelection1C||[];
		|selection.forEach(node => { 
		|	let data = {id: node.dbId, name: node.name, uuid: node.externalId, props: []};
		|	node.properties.forEach(p => { 
		|		data.props.push({
		|			category: p.displayCategory, 
		|			attr: p.attributeName, 
		|			name: p.displayName, 
		|			value: p.displayValue,
		|			units: p.units,
		|		})
		|	});
		| list.push(data);
		|});
		|JSON.stringify(list);
		|}";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыВыделенныеЭлементы", ЭтотОбъект);
	ВыполнитьJavaSctipt(ТекстСкрипта, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыВыделенныеЭлементы(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Выделение.Очистить();
	ДанныеJSON = ПрочитатьСтрокуJSON(РезультатВызова);
	ДанныеJSON = ПрочитатьСтрокуJSON(ДанныеJSON.result.result.value);
	Для каждого Элемент из ДанныеJSON Цикл
		ЗаполнитьЗначенияСвойств(Выделение.Добавить(), Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВизуализацияНажатияМышиПриИзменении(Элемент)
	
	Если ВизуализацияНажатияМыши Тогда
		ВнешняяКомпонента.НачатьВызовВизуализацияНажатияМыши(Новый ОписаниеОповещения, 255, 30, 16, 14, 127);
	Иначе
		ВнешняяКомпонента.НачатьВызовПрекратитьВизуализациюНажатияМыши(Новый ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры
